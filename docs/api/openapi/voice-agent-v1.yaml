openapi: 3.0.3
info:
  title: NGX Voice Sales Agent API
  description: |
    Elite conversational AI system for sales automation.
    
    ## Authentication
    All endpoints require JWT authentication via Bearer token.
    
    ## Rate Limiting
    - 60 requests per minute per user
    - 1000 requests per hour per user
    
    ## Versioning
    API version is included in the URL path (e.g., `/api/v1/`)
  version: 1.0.0
  contact:
    name: NGX Engineering Team
    email: engineering@ngx.com
  license:
    name: Proprietary
    url: https://ngx.com/license

servers:
  - url: https://api.ngx.com/v1
    description: Production server
  - url: https://staging-api.ngx.com/v1
    description: Staging server
  - url: http://localhost:8000/api/v1
    description: Local development

security:
  - bearerAuth: []

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Conversations
    description: Conversation management
  - name: Analytics
    description: Analytics and metrics
  - name: Health
    description: System health and status

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and receive access tokens
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Use refresh token to get new access token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /conversations:
    post:
      tags:
        - Conversations
      summary: Start a new conversation
      description: Initialize a new sales conversation with a customer
      operationId: createConversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConversationRequest'
      responses:
        '201':
          description: Conversation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
          headers:
            Location:
              description: URL of the created conversation
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

    get:
      tags:
        - Conversations
      summary: List conversations
      description: Get a paginated list of conversations
      operationId: listConversations
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/SortParam'
        - name: status
          in: query
          description: Filter by conversation status
          schema:
            type: string
            enum: [active, completed, abandoned]
        - name: start_date
          in: query
          description: Filter conversations started after this date
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationList'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /conversations/{conversationId}:
    parameters:
      - $ref: '#/components/parameters/ConversationId'
    
    get:
      tags:
        - Conversations
      summary: Get conversation details
      description: Retrieve detailed information about a specific conversation
      operationId: getConversation
      responses:
        '200':
          description: Conversation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationDetail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /conversations/{conversationId}/messages:
    parameters:
      - $ref: '#/components/parameters/ConversationId'
    
    post:
      tags:
        - Conversations
      summary: Send a message
      description: Send a message in an active conversation
      operationId: sendMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        '200':
          description: Message sent and response received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /analytics/metrics:
    get:
      tags:
        - Analytics
      summary: Get performance metrics
      description: Retrieve system performance and business metrics
      operationId: getMetrics
      parameters:
        - name: period
          in: query
          description: Time period for metrics
          required: true
          schema:
            type: string
            enum: [hour, day, week, month]
        - name: metrics
          in: query
          description: Specific metrics to retrieve
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: [conversion_rate, response_time, satisfaction_score, completion_rate]
      responses:
        '200':
          description: Metrics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the API is operational
      operationId: healthCheck
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    ConversationId:
      name: conversationId
      in: path
      required: true
      description: Unique identifier of the conversation
      schema:
        type: string
        format: uuid
        example: "550e8400-e29b-41d4-a716-446655440000"

    PageParam:
      name: page
      in: query
      description: Page number (1-based)
      schema:
        type: integer
        minimum: 1
        default: 1

    PageSizeParam:
      name: page_size
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    SortParam:
      name: sort
      in: query
      description: Sort order (field:direction)
      schema:
        type: string
        pattern: '^[a-z_]+:(asc|desc)$'
        example: "created_at:desc"

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "SecurePass123!"

    RefreshRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: JWT refresh token
        token_type:
          type: string
          enum: [Bearer]
          default: Bearer
        expires_in:
          type: integer
          description: Token expiration time in seconds
          example: 3600
        user:
          $ref: '#/components/schemas/UserInfo'

    UserInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin, agent]

    CreateConversationRequest:
      type: object
      required:
        - customer_name
        - customer_email
      properties:
        customer_name:
          type: string
          minLength: 1
          maxLength: 255
          example: "John Doe"
        customer_email:
          type: string
          format: email
          example: "john.doe@example.com"
        customer_phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          example: "+1234567890"
        platform:
          type: string
          enum: [web, mobile, sdk]
          default: web
        touchpoint:
          type: string
          enum: [landing_page, lead_magnet, blog, direct]
          default: direct
        metadata:
          type: object
          additionalProperties: true
          description: Additional context data

    Conversation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        customer_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [active, completed, abandoned]
        tier_detected:
          type: string
          enum: [essential, pro, elite, premium_prime, premium_longevity]
        confidence_score:
          type: number
          format: float
          minimum: 0
          maximum: 1
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ConversationDetail:
      allOf:
        - $ref: '#/components/schemas/Conversation'
        - type: object
          properties:
            messages:
              type: array
              items:
                $ref: '#/components/schemas/Message'
            analytics:
              $ref: '#/components/schemas/ConversationAnalytics'

    ConversationList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Conversation'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        role:
          type: string
          enum: [user, assistant, system]
        content:
          type: string
        audio_url:
          type: string
          format: uri
          nullable: true
        created_at:
          type: string
          format: date-time

    SendMessageRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 5000
        audio_enabled:
          type: boolean
          default: true

    MessageResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/Message'
        suggested_actions:
          type: array
          items:
            type: string
        confidence:
          type: number
          format: float
          minimum: 0
          maximum: 1

    ConversationAnalytics:
      type: object
      properties:
        duration_seconds:
          type: integer
        message_count:
          type: integer
        sentiment_score:
          type: number
          format: float
        conversion_probability:
          type: number
          format: float
        key_topics:
          type: array
          items:
            type: string

    MetricsResponse:
      type: object
      properties:
        period:
          type: string
        metrics:
          type: object
          additionalProperties:
            type: object
            properties:
              value:
                type: number
              trend:
                type: string
                enum: [up, down, stable]
              change_percentage:
                type: number

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        version:
          type: string
        timestamp:
          type: string
          format: date-time
        services:
          type: object
          additionalProperties:
            type: object
            properties:
              status:
                type: string
                enum: [up, down]
              latency_ms:
                type: number

    Pagination:
      type: object
      properties:
        page:
          type: integer
        page_size:
          type: integer
        total_items:
          type: integer
        total_pages:
          type: integer
        has_next:
          type: boolean
        has_previous:
          type: boolean

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code for debugging
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          additionalProperties: true
        request_id:
          type: string
          description: Unique request identifier for tracking

  responses:
    BadRequest:
      description: Bad request - Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "INVALID_INPUT"
            message: "The request body is invalid"
            details:
              field: "email"
              reason: "Invalid email format"

    Unauthorized:
      description: Unauthorized - Invalid or missing authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "UNAUTHORIZED"
            message: "Authentication required"

    NotFound:
      description: Not found - Resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "NOT_FOUND"
            message: "Resource not found"

    UnprocessableEntity:
      description: Unprocessable entity - Business logic error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "CONVERSATION_ENDED"
            message: "Cannot send message to ended conversation"

    TooManyRequests:
      description: Too many requests - Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          description: Request limit per time window
          schema:
            type: integer
        X-RateLimit-Remaining:
          description: Remaining requests in time window
          schema:
            type: integer
        X-RateLimit-Reset:
          description: Time when rate limit resets (Unix timestamp)
          schema:
            type: integer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "RATE_LIMIT_EXCEEDED"
            message: "Too many requests. Please retry after some time."